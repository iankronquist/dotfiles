# vim: set syntax=bash:

if [[ -z $PROJECTS_DIR ]]; then 
	PROJECTS_DIR=$HOME/gg
fi

gg() {
	# If there is no argument, go to $PROJECTS_DIR, show some stuff, and leave
	if [[ $1 == "" ]]; then 
		cd $PROJECTS_DIR
		ls
		return 0
	# else if the argument is a git url, clone it and go to it
	elif [[ $1 =~ 'http' || $1 =~ 'git.*@' || $1 =~ 'git://' ]]; then
		cd $PROJECTS_DIR
		# Run git clone and save messages on stdout and stderr
		CLONE_OUTPUT=$(git clone --depth=1 --recurse-submodules $1 $2 2>&1 | tee /dev/tty | head -n 1)

		# FIXME since I added the broken tee tty stuff, $? is the exit code of
		# the last thing in the pipeline to run, head, which is always 0

		# If the clone succeeded, find the directory created from the message
		# git wrote on stderr. Else, print git's problem and return with its exit
		# code.
		if [[ $? == 0 ]]; then
			GIT_CLONE_DIR=$(echo $CLONE_OUTPUT | sed "s/^[^']*'//; s/'[^']*$//")
			cd $GIT_CLONE_DIR
		else
			echo $CLONE_OUTPUT
			return $?
		fi
	# else if a directory in PROJECTS_DIR exists, go to it
	elif [[ -d $PROJECTS_DIR/$1 ]]; then 
		cd $PROJECTS_DIR/$1
	else
		echo "No project named" $1 "was found."
		return -1
	fi
}


# FIXME this is a crappy way to decide which completions to load
if ! [ -z "${ZSH_VERSION}" ]; then
	compdef '_files -W ~/gg' gg
elif ! [ -z "${BASH_VERSION}" ]; then

	__gg_autocomplete () {
		tmp=($(compgen -W "$(find "$PROJECTS_DIR"/* -maxdepth 0 | awk -F/ '{ print $NF }')" -- "${COMP_WORDS[$COMP_CWORD]}" ))
		COMPREPLY=( "${tmp[@]// /\ }" )
	}

	complete -F __gg_autocomplete gg
else
	echo "Shell is not bash or zsh, not loading completions"
fi
